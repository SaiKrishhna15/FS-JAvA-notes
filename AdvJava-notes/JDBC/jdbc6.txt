Oracle Download link : 
----------------------
https://drive.google.com/file/d/0B9rC21sL6v0td1NDZXpkUy1oMm8/view?usp=drive_link&resourcekey=0-aKooR3NmAh_eLo_qGw_inA


Working with LOB values
========================
Files are known as LOB's.

We have two types of LOB's.

1) BLOB (Binary Large Object)
------------------------
	ex:
		images, audio, video, avi file and etc.

2) CLOB (Character Large Object)
--------------------------------
	ex:
		text file, advanced text file and etc.

While dealing with simple statement object we can't use LOB values directory to query parameter.

To overcome this limitation we need to use PreparedStatement object.

We can set LOB values to query parameters by using following methods.
ex:
	ps.setBinaryStream(-,-,-) / ps.setBLOB(-,-,-)
	ps.setCharacterStream(-,-,-) / ps.setCLOB(-,-,-)


emp2 table 
===========
drop table emp2;

create table emp2(eid number(3),ename varchar2(10),ephoto BLOB);


PhotoInsertApp.java
-------------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc= new Scanner(System.in);	
		
		System.out.println("Enter the employee id :");
		int id = sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name = sc.next();
		
		//locate a file 
		File f = new File("src/com/ihub/www/rock.jpg");
		FileInputStream fis = new FileInputStream(f);
		
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry = "insert into emp2 values(?,?,?)";
		
		PreparedStatement ps = con.prepareStatement(qry);
		
		//set the values 
		ps.setInt(1, id);
		ps.setString(2, name);
		ps.setBinaryStream(3, fis, (int)f.length());
		
		//execute 
		int result = ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record inserted" );
		else
			System.out.println("Record inserted");
		
		ps.close();
		con.close();
	}
}

PhotoRetrieveApp.java
---------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PhotoRetrieveApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		String qry = "select * from emp2";
		ResultSet rs = st.executeQuery(qry);
		while(rs.next())
		{
			InputStream is =rs.getBinaryStream(3);
			FileOutputStream fos = new FileOutputStream("D:\\nikil.png");
			
			int byteReads=0;
			byte[] buff=new byte[150];
			
			while((byteReads=is.read(buff))!=-1)
			{
				fos.write(buff, 0, byteReads);
			}
			
			fos.close();
		}
		System.out.println("Please check the location");
		
		rs.close();
		st.close();
		con.close();
	}
}

Standard Procedure to write JDBC application 
=============================================
package com.ihub.www;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class StandardApp 
{
	public static void main(String[] args) 
	{
		final String DRIVER="oracle.jdbc.driver.OracleDriver";
		final String URL="jdbc:oracle:thin:@localhost:1521:XE";
		final String USERNAME="system";
		final String PASSWORD="admin";
		final String QUERY="select * from student";
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con = DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st = con.createStatement();
			rs = st.executeQuery(QUERY);
			while(rs.next())
			{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

Working with properties file 
============================
In regular intervals, our DBA will change username and password for security reason.

It is never recommanded to pass database properties directly to the application.

It is always recommanded to read database properties from properties file.

A properties file contains key and value pair.


dbdetails.properties
-------------------
driver= oracle.jdbc.driver.OracleDriver
url= jdbc:oracle:thin:@localhost:1521:XE
username= system 
password= admin 

PropertiesFileApp.java
-----------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception  
	{
		//locate properites file 
		FileInputStream fis = new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//declare Properties class
		Properties p = new Properties();
		
		//load the data from file to class
		p.load(fis);
		
		//reading the data from class
		String s1 = p.getProperty("driver");
		String s2 = p.getProperty("url");
		String s3 = p.getProperty("username");
		String s4 = p.getProperty("password");
		
		Class.forName(s1);
		Connection con = DriverManager.getConnection(s2,s3,s4);
		Statement st = con.createStatement();
		String qry ="select * from student";
		ResultSet rs = st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.close();
		st.close();
		con.close();
	}
}

JDBC Flexible Application 
=========================
In JDBC, Connection object consider as heavy weight object.

It is never recommanded to create connection object for multiple times.

It is recommanded to declare a seperate class which returns single Connection object.

ex:

DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	private DBConnection()
	{
	}
	
	public static Connection getConnection()
	{
		try
		{
			if(con==null)
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}


FlexibleApp.java
----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp
{
	public static void main(String[] args)throws Exception  
	{
		Connection con = DBConnection.getConnection();
		Statement st = con.createStatement();
		String qry = "select * from student";
		ResultSet rs = st.executeQuery(qry);
		while(rs.next())
		{
	System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}


Batch Processing 
================
Batch processing is used to declare multiple queries in a batch and makes a single call to the database.

To add the queries to batch we need to use addBatch() method of Statement object.
ex:
	st.addBatch(query);

To execute the batch we need to use executeBatch() method of Statement object.
ex:
	int[] result = st.executeBatch();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		//declare the queries 
		String qry1="insert into student values(104,'ramulu','pune')";
		String qry2="delete from student where sno=103";
		String qry3="update student set sname='rani' where sno=101";
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch 
		int[] result = st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		
		System.out.println("No of records effected are ="+sum);
		
		st.close();
		con.close();
	}
}


Thin-client/Fat-server application 
===================================
Every JDBC application is a thin-client/fat-server application.

Diagram: jdbc6.1

To creat a thin-client/ fat-server application we need to keep peristence logic and business logic in database software in the form PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.


PL/SQL procedure 
----------------
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
is
begin
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst = con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter 
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the values to IN parameter
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute 
		cst.execute();
		
		//gather the result 
		int sum = cst.getInt(3);
		
		System.out.println("sum of two numbers is ="+sum);
		
		cst.close();
		con.close();
	}
}






























































































