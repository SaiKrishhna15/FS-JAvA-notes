Types of communication
=======================
We can communicate to servlet program in three ways.

1) Browser to servlet communication 

2) Html to servlet communication 

3) Servlet to servlet communication 

In browser to servlet communication we need to type our request url in browser address bar.

Typing request url in browser address bar is quit complex.

To overcome this limitation we need to use HTML to servlet communication.

In HTML to servlet communication we can give the request to servlet program by using HTML based hyperlink or form page.

A request which is generated by using hyperlink does not carry the data.

A request which is generated by using form page will carry the data.

In HTML based hyperlink to servlet communication we need to type our request url as href url.
ex:
	<a href="http://localhost:2525/DateApp/test"> click Here </a>

In HTML based form page to servlet communication we need to type our request url as action url.
ex:
	<form action="http://localhost:2525/DateApp/test">
		-
		-
		-
	</form>




Example application on HTML based hyperlink to servlet communication 
=====================================================================
Diagram: servlet3.1

Deployment Directory Structure 
------------------------------
WishApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---WishSrv.java
|---Web Content
	|
	|---index.html 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.


It is never recommanded to extends a class with GenericServlet class because it won't give HTTP protocol features.

It is always recommanded to extends a class with HttpServlet class because it gives HTTP protocol features.


index.html
------------
<center>
	<h1>
		<a href="test"> getMsg </a>
	</h1>
</center>

web.xml 
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  
  <servlet>
  	<servlet-name>WishSrv</servlet-name>
  	<servlet-class>com.ihub.www.WishSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>WishSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

WishSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;

import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;

public class WishSrv extends HttpServlet
{
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		Calendar c = Calendar.getInstance();
		int h = c.get(Calendar.HOUR_OF_DAY);
		
		if(h<12)
			pw.println("<center><h1>Good Morning</h1></center>");
		else if(h<16)
			pw.println("<center><h1>Good Afternoon</h1></center>");
		else if(h<20)
			pw.println("<center><h1>Good Evening</h1></center>");
		else
			pw.println("<center><h1>Good Night</h1></center>");
		
		pw.close();
	}
}

Request url
------------
	http://localhost:2525/WishApp/



Example application on HTML based form page to servlet communication 
====================================================================
Diagram: servlet3.2

Deployment Directory Structure 
------------------------------
VoteApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---VoteSrv.java 
|---WebContent
	|
	|---form.html 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


We can send the request to servlet in two methodologies.

1) GET methodology 
---------------------
	It carries limited amount of data.

2) POST methodology 
--------------------
	It carries unlimited amount of data.


While working with HttpServlet it is never recommanded to use service(-,-) method because it is not designed according to HTTP protocol.

It is always recommanded to use doXxx(-,-) method because it is designed according to HTTP protocol.

We have seven doXxx(-,-) methods as give below

ex:
	doGet(-,-)
	doPost(-,-)
	doPut(-,-)
	doDelete(-,-)
	doHead(-,-)
	doOption(-,-)
	doTrace(-,-)


prototype of doXxx(-,-)
---------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws 							ServletException,IOException
{

}


form.html 
----------

<form action="test" method="GET">

	Name: <input type="text" name="t1"/> <br>
	
	Age: <input type="text" name="t2"/> <br>
	
	<input type="submit" value="vote"/>
	
</form>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>VoteSrv</servlet-name>
  	<servlet-class>com.ihub.www.VoteSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>VoteSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>


VoteSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name = req.getParameter("t1");
		String sage = req.getParameter("t2");
		
		//convert string to int 
		int age = Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1 style='color:red'>U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1 style='color:green'>U r eligible to vote</h1></center>");
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/VoteApp/


Interview Question 
=================
First 9 lines consists the numbers in lock pattern (3*3 matrix)
10th line of input consits of one value which represent phone lock pattern

output:
	print valid if the pattern lock matches else print invalid

constraints: 

The given value input must consists of only 5 characters. if not print invalid input.

The given value consists of only numerics characters (0-9)

For better understanding you can look below

1 2 3
4 5 6
7 8 9 

ex:
---


import java.util.Scanner;
public class Test 
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		int[][] arr=new int[3][3];
		
		int rows = arr.length;
		int cols = arr[0].length;
		
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				arr[i][j]=sc.nextInt();
			}
		}
		
		sc.nextLine();
		
		//enter lock pattern
		String pattern = sc.nextLine().trim();
		
		if(pattern.length()!=5 || !pattern.matches("[0-9]+"))
		{
			System.out.println("Invalid inputs");
			return;
		}
		
		//storing double array data to single dimensional array
		int[] newArr=new int[rows*cols];
		int index=0;
		
		for(int[] row:arr)
		{
			for(int num : row)
			{
				newArr[index++]=num;
			}
		}
		
		
		//check the pattern 
		for(int i=0;i<5;i++)
		{
			int digit = pattern.charAt(i) - '0';
			
			boolean found = false;
			
			for(int j=0;j<9;j++)
			{
				if(newArr[j] == digit)
				{
					found = true;
					break;
				}
			}
			if(!found)
			{
				System.out.println("Invalid");
				return;
			}
		}
		
		System.out.println("Valid");
	}
}

















































































