Servlet to servlet communication 
================================
Servlet to servlet communication is also known as servlet chaining.

Servlet to servlet communication is possible in three ways.

1) Forwarding the request 

2) Including the response 

3) Send Redirection 


1) Forwarding the request
-------------------------
In forwarding the request , the output of source servlet program will be discarded and output of destination servlet program goes to browser window as dynamic response.

To forward the request we need to use RequestDispatcher object.

RequestDispatcher is an interface which is present in javax.servlet package.

We can create RequestDispatcher object by using getRequestDispatcher() method of HttpServletRequest.

ex:
	RequestDispatcher rd = req.getRequestDispatcher();
	rd.forward(req,res);


2) Including the response 
---------------------------
In including the response, the output of source servlet program and destination servlet program combinely goes to browser window as dynamic response.

To include the response we need to use RequestDispatcher object.

RequestDispatcher is an interface which is present in javax.servlet package.

We can create RequestDispatcher object by using getRequestDispatcher() method of HttpServletRequest.

ex:
	RequestDispatcher rd = req.getRequestDispatcher();
	rd.include(req,res);

Deployment Directory Structure 
-------------------------------
STSApp1 
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv1.java
			|---TestSrv2.java
|---WebContent 
	|
	|---form.html 
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html 
-----------

<form action="test1">
	
	<table align="center">
		<tr>
			<td>UserName:</td>
			<td><input type="text" name="t1"/></td>
		</tr>
		<tr>
			<td>Password:</td>
			<td><input type="password" name="t2"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="refresh"/></td>
			<td><input type="submit" value="login"/></td>
		</tr>
	</table>
	
</form>

web.xml 
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 <servlet>
 	<servlet-name>TestSrv1</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv1</servlet-class>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv1</servlet-name>
 	<url-pattern>/test1</url-pattern>
 </servlet-mapping>
 
 
 <servlet>
 	<servlet-name>TestSrv2</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv2</servlet-class>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv2</servlet-name>
 	<url-pattern>/test2</url-pattern>
 </servlet-mapping>
 
 
 <welcome-file-list>
 	<welcome-file>form.html</welcome-file>
 </welcome-file-list>
 
</web-app>

TestSrv1.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv1 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name = req.getParameter("t1");
		String pass = req.getParameter("t2");
		
		if(pass.equals("admin"))
		{
			RequestDispatcher rd = req.getRequestDispatcher("test2");
			rd.forward(req, res);
		}
		else
		{
			pw.println("<center><b style='color:red'>Sorry! Invalid username or password</b></center>");
			RequestDispatcher rd = req.getRequestDispatcher("form.html");
			rd.include(req, res);
		}
		
		pw.close();
	}
}


TestSrv2.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv2 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Login Done Successfully!!</h1></center>");
		
		pw.close();
	}
}

Request url 
----------
	http://localhost:2525/STSApp1/


Send Redirection
==================
It is used to forward the request to application which is present in same server or different server.

It is used to redirect the response to other resources like servlets, JSP and etc.

To perform send redirection we need to use sendRedirect() method of HttpServletResponse.

ex:
	res.sendRedirect("url");

It always sends a new request and it uses browser window to send the request.


Deployment Directory Structure 
------------------------------
STSApp2
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|----WebContent
	|
	|---index.html 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html 
----------

<center>
	
	<h1>
		<a href="test?t1=flights"> Flights </a>
	</h1>
	
	<h1>
		<a href="test?t1=hotels"> Hotels </a>
	</h1>
	
	<h1>
		<a href="test?t1=railways"> Trains </a>
	</h1>
	
</center>

web.xml 
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet  
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		//reading request parameter value 
		String value = req.getParameter("t1");
		
		res.sendRedirect("https://www.makemytrip.com/"+value);
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/STSApp2/



Q) How to enable <load-on-startup> and what happens if we enable <load-on-startup> ?

We can enable <load-on-startup> inside web.xml file.

ex:
	web.xml 
	-------
	<web-app>
		<servlet>
  			<servlet-name>TestSrv</servlet-name>
  			<servlet-class>com.ihub.www.TestSrv</servlet-class>
			<load-on-startup>1</load-on-startup>
  		</servlet>
  
  		<servlet-mapping>
  			<servlet-name>TestSrv</servlet-name>
  			<url-pattern>/test</url-pattern>
  		</servlet-mapping>
	</web-app>	

If we enable <load-on-startup> then our servlet container will create servlet program during the server startup or during the deployment of web application. 

In short, our servlet container creates servlet object before we give the request.

Stateless behaviour of web application 
======================================
Diagram: servlet6.1

Above diagram demonstrate stateless behaviour of web application.

In servlet, every web application is a stateless web application. It means we can't access previous request data while processing the current request.

To overcome this limitation we need to use session tracking.



Deployment Directory Structure 
------------------------------
StatelessApp 
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv1.java
			|---TestSrv2.java
|----WebContent
	|
	|---form.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
--------

<form action="test1">

	Name :<input type="text" name="t1"/>  <br>
	
	Father's Name : <input type="text" name="t2"/>  <br>
	
	Marital Status : 
	<input type="checkbox" name="t3" value="married"/> MARRIED
	<input type="checkbox" name="t3" value="single"/> SINGLE <br>
	
	<input type="submit" value="submit"/>

</form>

web.xml 
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>TestSrv1</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv1</servlet-class>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv1</servlet-name>
  	<url-pattern>/test1</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>TestSrv2</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv2</servlet-class>
  	<load-on-startup>2</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv2</servlet-name>
  	<url-pattern>/test2</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
</web-app>

TestSrv1.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv1 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name = req.getParameter("t1");
		String fname = req.getParameter("t2");
		String ms = req.getParameter("t3");
		
		if(ms.equals("married"))
		{
			pw.println("<form action='test2'>");
			pw.println("Spouse Name : <input type='text' name='f2t1'/> <br>");
			pw.println("No of child : <input type='text' name='f2t2'/> <br>");
			pw.println("<input type='submit' value='submit'/>");
			pw.println("</form>");
		}
		else
		{
			pw.println("<form action='test2'>");
			pw.println("When will u marry : <input type='text' name='f2t1'/> <br>");
			pw.println("Why will u marry : <input type='text' name='f2t2'/> <br>");
			pw.println("<input type='submit' value='submit'/>");
			pw.println("</form>");
		}
		pw.close();
	}
}

TestSrv2.java
---------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv2 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		
		//reading form 1 data 
		String name = req.getParameter("t1");
		String fname = req.getParameter("t2");
		String ms = req.getParameter("t3");
		
		//reading form 2 data 
		String val1 = req.getParameter("f2t1");
		String val2 = req.getParameter("f2t2");
		
		pw.println("Form 1 Data :"+name+" "+fname+" "+ms+"<br>");
		pw.println("Form 2 Data :"+val1+" "+val2+"<br>");
		
		pw.close();
	}
}

Request url 
----------
	http://localhost:2525/StatelessApp/






































































