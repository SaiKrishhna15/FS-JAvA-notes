How to access our web application only by using url pattern
==========================================================
We can access our web application only by uing url pattern if we keep ABC.jsp file inside "WEB-INF" folder.

Deployment Directory Structure 
-----------------------------
JspApp1
|
|---Java Resources
|	
|---WebContent
	| 
	|
	|---WEB-INF
		|
		|---ABC.jsp
		|---web.xml

ABC.jsp 
-------

<center>
	<h1>
		Current Date and Time  <br>
		
		<%
			java.util.Date d = new java.util.Date();
			out.println(d);
		%>
		
	</h1>
</center>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>ABC</servlet-name>
  	<jsp-file>/WEB-INF/ABC.jsp</jsp-file>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>ABC</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
</web-app>

Request url 
----------
	http://localhost:2525/JspApp1/test   (valid)
	http://localhost:2525/JspApp1/ABC.jsp (invalid)	


Q) What is the difference between Servlets and JSP ?

Servlets					JSP
-------						-----
To work with servlets strong java knowledge 	To work with JSP strong java knowledge 
is required.					is not required.

It is not suitable for non-java programmers.	It is suitable for non-java programmers.

It does not support tags.			It supports tags.

It does not give implicit objects.		It gives implicit objects.

Configuration of each servlet program in 		Configuration of each JSP program in 
web.xml file is mandatory.			web.xml file is optional.

Handling exceptions are mandatory.		Handling exceptions are optional.

It is faster.					It is a slower.


Note:
-----
Servlet container executes servlet program directly. JSP container can't execute jsp program directly. It takes the support of servlet container to execute JSP program. So for very JSP program JES(Java Equivalent Servlet) class will be created.


JSP Life Cycle Methods
======================
We have three life cycle methods in JSP.

1) _jspInit()
------------
	It is used for instantiation event.
	This method will execute just before JES class object creation.

2) _jspService()
-----------------
	It is used for request arrival event.
	This method will execute when request goes to JSP program.

3) _jspDestroy()  
---------------
	It is used for destruction event.
	This method will execute just before JES class object destruction.


Phases of JSP 
==============
We have two phases in JSP.

1) Translation phase 

2) Request Processing phase 

1) Translation phase 
--------------------
	In translation phase our JSP program converts to JES class.

2) Request Processing phase
-----------------------------
	In request processing our JES class will be executed and result sends to browser 
	window as dynamic response.

Diagram: jsp2.1


Q) How to enable <load-on-startup> and what happens if we enable <load-on-startup> ?

We can enable <load-on-startup> inside web.xml file.

ex:
	web.xml 
	------
	<web-app>
		<servlet>
			<servlet-name>ABC</servlet-name>
			<jsp-file>/ABC.jsp</jsp-file>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>ABC</servlet-name>
			<url-pattern>/test</url-pattern>
		</servlet-mapping>
	</web-app>

If we enable <load-on-startup> then our web container performs translation phase during the server startup or during the deployment of web application.

In general, our JES class object will be ready before we give the request.

Q) What is difference between HTML and JSP?

HTML						JSP 
----------					--------
HTML stands for Hypertext Markup Language	JSP stands for Java Server Pages.

It is a static web resource program.		It is a dynamic web resource program.

It is used to create static web pages.		It is used to create dynamic web pages.

It does not support custom tags.		It supports custom tags.

It requires browser window for execution.	It requires server for execution.

We can't declare java code.			We can declare java code.

It is used to develop client side components.	It is used to develop server side components.



JSP tags/elements 
==================
We have three tags in JSP.

1) Scripting tags 
-----------------
	i) Scriptlet tag
		ex:
			<% code here %>
 

	ii) Expression tag 
		ex:
			<%= code here %>

	iii) Declaration tag 
		ex:
			<%! code here %>
	
2) Directive tags 
----------------
	i) Page directive tag
		ex:
			<%@page attribute=value %> 

	ii) Include directive tag 
		ex:
			<%@include attribute=value %>

3) Action tags 
-------------
	<jsp:include>
	<jsp:forward>
	<jsp:useBean>
	<jsp:setProperty>
	<jsp:getProperty> 
	and etc.


Comments in JSP 
---------------
	<%-- comment here --%> 


	
Scriptlet tag
=================
It is used to declare the java code.

syntax:
--------
	<% code here %>

Deployment Directory Structure 
------------------------------
JspApp2
|
|---Java Resources
|
|---WebContent 
	|
	|---form.html
	|---process.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.
 
form.html
---------
<form action="process.jsp">
	
	Name : <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>
	
</form>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

process.jsp 
------------
<center>
	<h1>
		
		<%
			String name = request.getParameter("t1");
			out.println("Welcome :"+name);
		%>
		
	</h1>
</center>

Request url 
-----------
	http://localhost:2525/JspApp2/







































 