
Steps to develop Web application using Maven
--------------------------------------------
step1:
-----
	Launch eclipse IDE by choosing workspace location.

step2:
------
	Create a Maven project.
	ex:
		File --> new --> maven project --> Next -->
		
		Group Id : org.apache.maven.archetype
		Artifact Id : maven-archetype-webapp 
		version : 1.0 ---> Next ---> 
		
		Group Id: com.ihub.www
		Artifact Id :  MavenProj
		package :   com.ihub.www  ---> Finish.

step3:
-----
	Add "servlet-api" maven dependency inside pom.xml file.
	
pom.xml
-------
-
-
<dependencies>

	<dependency>
   		 <groupId>javax.servlet</groupId>
   		 <artifactId>servlet-api</artifactId>
    		<version>2.5</version>
    		<scope>provided</scope>
	</dependency>
</dependencies>
-
-

step4:
------
	Add some logic inside index.jsp file.

index.jsp
---------
<center>
	<h1>
		<a href="test"> Click Me</a>
	</h1>
</center>

step5:
-----
	Configure servlet program and welcome file in web.xml file.

web.xml
---------
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class> 
  </servlet>  
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>  
  	<url-pattern>/test</url-pattern>
  </servlet-mapping> 
  
  <welcome-file-list>
  	<welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>


step6:
------
	Create a "java" folder inside "src/main" folder.
	

step7:
-----
	Create a package inside "Java Resources/src/main/java" and TestSrv file. 

TestSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Welcome to Servlets </h1></center>");
		
		pw.close();
	}
}


step8:
------
	run Maven project.
	ex:
		right click to project --> run as --> run on server.


step9:
-----
	Test the application by using below request url.
	ex:
		http://localhost:2525/MavenProj



Implicit objects in JSP 
=======================
Object which can be used directly without any configuration is called implicit object.

Implicit objects created by the web container which is available for every JSP page.

JSP gives nine implicit objects as give below.

ex:
	Object		Type
	------		----------
	out		JspWriter 
	request 	HttpServletRequest 
	response	HttpServletResponse 
	config		ServletConfig 
	application 	ServletContext 
	session		HttpSession 
	pageContext 	PageContext 
	exception 	Throwable 
	page 		Object 
		

response object
===============
A response is a implicit object of type HttpServletResponse.

It is created by the web container.

It is used to send the response or errors to other resources. 


Deployment Directory Structure 
------------------------------
JspApp13
|
|---Java Resources
|
|---WebContent
	|
	|---index.html 
	|---process.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
---
In above application we need to add "servlet-api.jar" file in project build path.

index.html
-----------
<center>
	<h1>
		<a href="process.jsp"> Facebook </a>
	</h1>
</center>

process.jsp
----------
<%
	response.sendRedirect("http://www.facebook.com/login");
%>

web.xml 
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 <welcome-file-list>
 	<welcome-file>index.html</welcome-file>
 </welcome-file-list>
 
</web-app>

Request url
----------
	http://localhost:2525/JspApp13/



config object
===============
A config is an implicit object of type ServletConfig.

It is created by the web container.

It is used to read initialized parameter of a perticular JSP.

Deployment Directory Structure 
------------------------------
JspApp14
|
|---Java Resources
|
|---WebContent
	|
	|---index.jsp 
	|---process.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.jsp 
-----------
<center>
	<h1>
		<a href="test"> click me </a>
	</h1>
</center>

process.jsp 
----------
<%
	String value = config.getInitParameter("driver");
	out.println(value);
%>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>ABC</servlet-name>
  	<jsp-file>/process.jsp</jsp-file>
  	<init-param>
  		<param-name>driver</param-name>
  		<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  	</init-param>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>ABC</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
</web-app>

Request url
--------
	http://localhost:2525/JspApp14/


application object
====================
A application is a implicit object of type ServletContext.

It is created by the web container.

It is used to read configuration information from web.xml file.


Deployment Directory Structure 
------------------------------
JspApp15
|
|---Java Resources
|
|---WebContent
	|
	|---index.jsp 
	|---process.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.jsp 
-----------
<center>
	<h1>
		<a href="test"> click me </a>
	</h1>
</center>

process.jsp 
----------
<%
	String value = application.getInitParameter("driver");
	out.println(value);
%>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>ABC</servlet-name>
  	<jsp-file>/process.jsp</jsp-file>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>ABC</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>

  <context-param>
  	<param-name>driver</param-name>
  	<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  </context-param>
  
</web-app>


Request url
--------
	http://localhost:2525/JspApp15


session object
===============
A session is an implicit of object of type HttpSession.

It is created by the web container.

It is used to add, read and remove the attributes from session.


Deployment Directory Structure 
-------------------------------
JspApp16
|
|---Java Resources
|	
|---Web Content
	|
	|---form.html 
	|---first.jsp 
	|---second.jsp 
	|
	|---WEB-INF
		|
		|--web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
----------
<form action="first.jsp">
	
	Name: <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>
	
</form>

web.xml 
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
	
	<welcome-file-list>
		<welcome-file>form.html</welcome-file>
	</welcome-file-list>
	
</web-app>


first.jsp 
----------
<%
	String name = request.getParameter("t1");
	
	session.setAttribute("pname",name);
	
	out.println("Welcome :"+name);
%>
<center>
	<a href="second.jsp"> click for second.jsp </a>
</center>

second.jsp 
-----------
<%
	String name = (String) session.getAttribute("pname");
	out.println("Hey! "+name);
%>

Request url
--------
	http://localhost:2525/JspApp16/


pageContext object
===================
A pageContext is an implicit object of type PageContext.

It is created by the web container.

It is used add, read and remove attributes from Session with following scopes.
ex:
	page scope 
	request scope 
	session scope 
	application scope 


Deployment Directory Structure 
-------------------------------
JspApp16
|
|---Java Resources
|	
|---Web Content
	|
	|---form.html 
	|---first.jsp 
	|---second.jsp 
	|
	|---WEB-INF
		|
		|--web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
----------
<form action="first.jsp">
	
	Name: <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>
	
</form>

web.xml 
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
	
	<welcome-file-list>
		<welcome-file>form.html</welcome-file>
	</welcome-file-list>
	
</web-app>


first.jsp 
----------
<%
	String name = request.getParameter("t1");
	
	pageContext.setAttribute("pname",name,pageContext.SESSION_SCOPE);
	
	out.println("Welcome :"+name);
%>
<center>
	<a href="second.jsp"> click for second.jsp </a>
</center>



second.jsp 
-----------
<%
	String name = (String) pageContext.getAttribute("pname",pageContext.SESSION_SCOPE);
	out.println("Hey Bro! "+name);
%>


Request url
--------
	http://localhost:2525/JspApp17/



























