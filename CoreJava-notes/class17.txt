1) Assignment operators 
=======================

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); // 30
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		final int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); // C.T.E 
	}
}
Note:
----
	We can't modify final variable 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=1,2,3,4,5;
		
		System.out.println(i); // C.T.E 
	}
}

ex:
---
class Test  
{
	//global variable 
	static int i=10;
	
	public static void main(String[] args) 
	{
		//local variable 
		int i=20;
		
		System.out.println(i); // 20
	}
}
Note:
	Here priority goes to local variable.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i+=5; // i = i + 5;
		
		System.out.println(i);//15
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i-=50; // i = i - 50
		
		System.out.println(i);// -40
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i*=3; // i = i * 3 
		
		System.out.println(i);//30
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i/=3; // i = i / 3;
		
		System.out.println(i);//3
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i%=3; // i = i % 3;
		
		System.out.println(i);//1
	}
}

2) Ternary operators 
=====================
syntax
------
	(condition)?value1:value2;

ex:

class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2)?true:false;
		
		System.out.println(b); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String s = (5>20)?"Hi":"Bye";
		
		System.out.println(s); //Bye 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		char ch = (true)?'T':'F';
		
		System.out.println(ch); //T 
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = (5>2)?1:0;
		
		System.out.println(i); //1 
	}
}


Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a = sc.nextInt();
		
		System.out.println("Enter the second number :");
		int b = sc.nextInt();
		
		//logic 
		int max = (a>b)?a:b;
		
		System.out.println(max+" is greatest");
	}
}

Q) Write a java program to find out greatest of three numbers ?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a = sc.nextInt();
		
		System.out.println("Enter the second number :");
		int b = sc.nextInt();
		
		System.out.println("Enter the third number :");
		int c = sc.nextInt();
		
		//logic 
		int max = (a>b)?((a>c)?a:c):((b>c)?b:c);
		
		System.out.println(max+" is greatest");
	}
}


3) Logical operators 
=====================

Logical AND operator  (&&)
--------------------------
Logical AND operator deals with boolean values either true or false.

Truth table 
-----------
T	T	= T
T	F	= F
F	T	= F 
F	F	= F 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true && true); // true 
		
		System.out.println(true && false); // false
		
		System.out.println(false && true); // false 
		
		System.out.println(false && false); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (6<10);
		
		System.out.println(b); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (16<10);
		
		System.out.println(b); //  false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str = ((5>2) && (5>10))?"Welcome":"Thank You";
		
		System.out.println(str); // Thank You 
	}
}

Logical OR operator (||)
------------------------
Logical OR operator deals with boolean values either true or false.

Truth table
-------------
T	T	= T
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true || true); // true 
		
		System.out.println(true || false); // true 
		
		System.out.println(false || true); // true 
		
		System.out.println(false || false);// false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) || (6<3);
		
		System.out.println(b); // false 
	}
}

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) || (6<30);
		
		System.out.println(b); // true
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) || (6<2) && (10>20);
		
		System.out.println(b); // false 
	}
}


Logical NOT operator (!)
------------------------
Logical NOT operator deals with boolean values either true or false.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = !(5>2);
		
		System.out.println(b); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = !(5>20);
		
		System.out.println(b); //true 
	}
}


How to convert decimal number to binary number
----------------------------------------------
	
	10   - decimal number 
	1010 - binary number 

	2|10
         ---- 0
	2|5
         ---- 1
	2|2
	 ---- 0		^
	  1		|
	-----------------
	1010


How to convert binary number to decimal number
----------------------------------------------

	1010 - binary number 
	10   - decimal number  

	1010
	    <----

	0*1 + 1*2 + 0*4 + 1*8
	
	0 + 2 + 0 + 8 = 10



4) Bitwise operators 
=====================

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary numbers.

Truth table 
-----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F  

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		
		int c = a & b;
		
		System.out.println(c); // 10
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	&  - 1010 <---
	
	0*1 + 1*2 + 0*4  + 1*8 
	
	0 + 2 + 0 + 8 = 10
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;
		
		int c = a & b;
		
		System.out.println(c); // 0
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	&  - 0000 
*/

Bitwise OR operator (|)
------------------------
Bitwise OR operator deals with binary numbers.

Truth table 
-----------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		
		int c = a | b;
		
		System.out.println(c); // 15
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	|  - 1111 <---
	
	1*1  + 1*2  + 1*4 + 1*8
	
	1 + 2 + 4 + 8 = 15
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;
		
		int c = a | b;
		
		System.out.println(c); // 15
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	|  - 1111
*/

Bitwise XOR operator (^)
-------------------------
Bitwise XOR operator deals with binary numbers.

Truth table
----------
T	T	= F
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;
		
		int c = a ^ b;
		
		System.out.println(c); // 15
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	^  - 1111
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		
		int c = a ^ b;
		
		System.out.println(c); // 5
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	^  - 0101
*/

Bitwise Not operator (~)
------------------------
syntax
------
	-(n+1)

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= ~10;
		System.out.println(i); // -11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= ~23;
		System.out.println(i); // -24
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= ~(-23);
		System.out.println(i); // 22
	}
}













































































































































