Right Side Loop Patterns
========================
1)
      1 
    2 2 
  3 3 3 
4 4 4 4 

class Test  
{
	public static void main(String[] args) 
	{
		//rows 
		for(int i=1;i<=4;i++)
		{
			//space 
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//right side elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line 
			System.out.println();
		}
	}
}


2)
4 4 4 4 
  3 3 3
    2 2
      1 

class Test  
{
	public static void main(String[] args) 
	{
		//rows 
		for(int i=4;i>=1;i--)
		{
			//space 
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//right side elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line 
			System.out.println();
		}
	}
}

Pyramid loop patterns
=====================
1)
      1 
    1 2 1 
  1 2 3 2 1 
1 2 3 4 3 2 1 

class Test  
{
	public static void main(String[] args) 
	{
		//rows 
		for(int i=1;i<=4;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			//right side 
			for(int j=i-1;j>=1;j--)
			{
				System.out.print(j+" ");
			}
			//new line 
			System.out.println();
		}
	}
}


2) 

1 2 3 4 3 2 1
  1 2 3 2 1 
    1 2 1 
      1

class Test  
{
	public static void main(String[] args) 
	{
		//rows 
		for(int i=4;i>=1;i--)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			//right side 
			for(int j=i-1;j>=1;j--)
			{
				System.out.print(j+" ");
			}
			//new line 
			System.out.println();
		}
	}
}


3) 
      * 
    * * * 
  * * * * * 
* * * * * * *

class Test  
{
	public static void main(String[] args) 
	{
		//rows 
		for(int i=1;i<=4;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side 
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//right side 
			for(int j=i-1;j>=1;j--)
			{
				System.out.print("* ");
			}
			//new line 
			System.out.println();
		}
	}
}

4) 

1             1 
1 2         2 1 
1 2 3     3 2 1 
1 2 3 4 4 3 2 1

class Test  
{
	public static void main(String[] args) 
	{
		int rows=4;
		
		//rows
		for(int i=1;i<=rows;i++)
		{
			//left side 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			
			//spaces
			for(int j=1;j<=(rows-i)*2;j++)
			{
				System.out.print("  ");
			}
			
			//right side 
			for(int j=i;j>=1;j--)
			{
				System.out.print(j+" ");
			}
			//new line 
			System.out.println();
		}
	}
}

5) 

Write a java program to display pascal triangle?

     1
    1 1
   1 2 1 
  1 3 3 1 
 1 4 6 4 1 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=0;i<5;i++)
		{
			//space 
			for(int j=4;j>i;j--)
			{
				System.out.print(" ");
			}
			
			int number = 1;
			
			for(int k=0;k<=i;k++)
			{
				System.out.print(number+" ");				
				number = number * (i-k)/(k+1);
			}
			//new line
			System.out.println();
		}
	}
}

6) 

Q) Write a java program to display below loop pattern>

    *
   * *
  * * * 
 * * * * 
* * * * * 

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=0;i<5;i++)
		{
			//space 
			for(int j=4;j>i;j--)
			{
				System.out.print(" ");
			}
			for(int k=0;k<=i;k++)
			{
				System.out.print("* ");				
			}
			//new line
			System.out.println();
		}
	}
}


7) 

Write a java program to display below loop pattern?


 6 5 4 3 2 1
  6 5 4 3 2
   6 5 4 3 
    6 5 4
     6 5 
      6 


class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=6;i++)
		{
			//space 
			for(int j=1;j<i;j++)
			{
				System.out.print(" ");
			}
			
			//elements
			for(int j=6;j>=i;j--)
			{
				System.out.print(j+" ");
			}
			
			//new line 
			System.out.println();
		}
	}
}

8)
Write a java program to display below loop pattern?

4 4 4 4 4 4 4 
4 3 3 3 3 3 4
4 3 2 2 2 3 4
4 3 2 1 2 3 4 
4 3 2 2 2 3 4 
4 3 3 3 3 3 4 
4 4 4 4 4 4 4	


class Test  
{
	public static void main(String[] args) 
	{
		int size=7,n=4;
		
		for(int i=0;i<size;i++)
		{
			for(int j=0;j<size;j++)
			{
				int result = n - Math.min(Math.min(i,j),Math.min(size-i-1,size-j-1));
				System.out.print(result+" ");
			}
			//new line 
			System.out.println();
		}
	}
}

3) Jump statements 
==================
It is used to jump from one section of code to another section.

We have three jump statements in java.

i) break 

ii) continue 

iii) return 


i) break 
---------
It is used to break the execution of loops and switch case.

For conditional statement we can use if condition.

syntax:
	break;

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		break;
		
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E : break outside switch or loop

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		if(true)
		{
			break;
		}
		
		System.out.println("stmt2");
	}
}
o/p:
	 C.T.E : break outside switch or loop

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				break;
			}
			
			System.out.print(i+" ");//1 2 3 4 
		}
	}
}


ii) continue 
-------------
It is used to continue the execution of loops.

For conditional statement we can use if condition.

syntax:
------
	continue;

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		continue;
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E : continue outside of loop


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			continue;
		}
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E : continue outside of loop

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				continue;
			}
			
			System.out.print(i+" "); // 1 2 3 4 6 7 8 9 10
		}
	}
}

iii) return 
-------------
It is used to exit from methods and it contains optional return value.

syntax:
	return; 

ex:
---
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the option :");
		int option = sc.nextInt(); // 100
		
		//calling method 
		String result = menu(option);
		System.out.println(result);
	}
	//static method 
	public static String menu(int option)
	{
		if(option==100)
			return "It is a police number";
		else if(option==103)
			return "It is a enquiry number";
		else if(option==108)
			return "It is a emergency number";
		else
			return "Invalid option";
	}
}


Various ways to declare the methods in java
===========================================
There are four ways to declare the methods in java.

1) No returntype with No argument method 

2) No returntype with argument method 

3) With returntype with No argument method 

4) With returntype with argument method 


1) No returntype with No argument method 
-----------------------------------------
If we don't have arguments then we need to ask input values inside callie method.


Q) Write a java program to perform sum of two numbers using no returntype with no argument method?

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		//caller method 
		sum();
	}
	//callie method 
	public static void sum()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the first number :");
		int a = sc.nextInt();
		System.out.println("Enter the second number :");
		int b = sc.nextInt();
		
		int c = a + b;
		
		System.out.println(c); 
	}
}

Q) Write a java program to check given number is even or odd using no returntype with no argument method?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		//caller method 
		find();
	}
	//callie method 
	public static void find()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n = sc.nextInt();
		if(n%2==0)
			System.out.println("It is even number");
		else
			System.out.println("It is odd number");
	}
}


















