Arrays
=======
In a normal variable we can store one value at a time. 

To store multiple values we need to use arrays.

Arrays is a collection of homogeneous data elements.

The main advantages of arrays are 

1) We can represent multiple elements using single variable name.
   ex:
	int[] arr = {10,20,30};

2) Performance point of view arrays recommanded to use.

The main disadvantages of arrays are 

1) It is fixed in size. Once if we create an array there is no chance of increasing or 
   decreasing the size of an array.

2) To use array concept in advanced we should know what is the size of an array which is always 
   not possible. 

In java, arrays are classified into three types.

1) Single Dimensional Array 

2) Double Dimensional Array 

3) Multi Dimensional Array 


Array Declaration 
-----------------
At the time of array declaration we should not specify array size.

ex:
					Array
	|--------------------------------|--------------------------------|
Single Dimensional Array	Double Dimensional Array	Multi Dimensional Array 

int[] arr;			int[][] arr;			int[][][] arr;
int  []arr;			int  [][]arr;			int [][][]arr;
int arr[];			int arr[][];			int  arr[][][];
				int[]  []arr;			int[][] []arr;
				int[] arr[];			int[][] arr[];
				int  []arr[];			int[]  [][]arr;
								int[] arr[][];
								int[] []arr[];
								int [][]arr[];
								int []arr[][];


Array creation
---------------
In java, every array consider as an object. Hence we will use new operator to create an array.

Diagram: class26.1

Rules to constructor an array 
-----------------------------
Rule1:
------
	At the time of array creation compulsary we need to specify array size.
	ex:
		int[] arr = new int[3]; 
		int[] arr = new int[]; // C.T.E Array Dimension missing  

Rule2:
------
	It is legal to have an array size with zero.
	ex:
		int[] arr = new int[0];
		System.out.println(arr.length); // 0 

Rule3:
-----
	We can't give negative number as an array size otherwise we will get Runtime exception called
	NegativeArraySizeException.
	ex:
		int[] arr = new int[-3]; // R.E NegativeArraySizeException 

Rule4:
------
	The allowed datatype for an array size is byte,short,int and char. If we take other datatypes
	then we will get compile time error.

	ex:
		int[] arr = new int['a']; 

		byte b=10;
		int[] arr = new int[b];

		int[] arr = new int[10.5d]; // C.T.E 

Rule5:
-----
	The maximum length we can take for an array size is maximum length of int.
	ex:
		int[] arr = new int[2147483647];


Array Initialization 
--------------------
Once if we create an array , every array element is initialized with default values.

If we are not happy with default values we can change with customized values.

ex:
	int[] arr = new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;
	arr[3]=40; // R.E ArrayIndexOutOfBoundsException 

Diagram: class26.2


Array Declation , Creation and Initialization using single line 
--------------------------------------------------------------

	int[] arr;
	arr = new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;	==>	int[] arr = {10,20,30};

			==>	char[] carr = {'a','b','c'};
	
			==> 	String[] sarr = {"hi","bye"};



Q) What is the difference between length and length() ?

length 
-------
It is a final variable which is applicable for arrays.

It will return size of an array.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr = new int[3];
		System.out.println(arr.length); // 3
	}
}

length()
----------
It is a predefined method which is applicable for String objects.

It will return number of characters present in String.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="ihub";
		System.out.println(str.length()); // 4
	}
}

Single Dimensional Array Programs 
==================================

Q) Write a java program to accept array elements and display them?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the array size :");
		int size = sc.nextInt(); // 4
		
		int[] arr = new int[size];
		
		//insert elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("Enter the element :");
			arr[i]=sc.nextInt();
		}
		
		//read elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}


Q) Write a java program to display array elements one by one ?

input:
	5 8 2 9 1 3 

output:
	5
	8
	2
	9
	1
	3

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr = {5,8,2,9,1,3};
		
		for(int i=0;i<arr.length;i++)
		{
			System.out.println(arr[i]);
		}
	}
}

for each loop 
==============
It is used to iterate the elements/objects from arrays/collections.

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr = {5,8,2,9,1,3};
		
		for(int i : arr)
		{
			System.out.println(i);
		}
	}
}


Q) Write a java program to display array elements in reverse order?

input:
	5 8 2 9 1 3 

output:
	3 1 9 2 8 5

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr = {5,8,2,9,1,3};
		
		for(int i=arr.length-1;i>=0;i--)
		{
			System.out.print(arr[i]+" ");
		}
	}
}





Q) Write a java program to display even elements from given array?

input:
	5 8 2 9 1 3 

output:
	8 2 

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr = {5,8,2,9,1,3};
		
		for(int i:arr)
		{
			if(i%2==0)
			{
				System.out.print(i+" ");
			}
		}
	}
}

Q) Write a java program to copy array elements from one array to another array?

input:
	5 8 2 9 1 3 


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr1 = {5,8,2,9,1,3};
		
		int[] arr2 = new int[arr1.length];
		
		int j=0;
		for(int i:arr1)
		{
			arr2[j++]=i;
		}
		
		//display the elements
		for(int i:arr2)
		{
			System.out.print(i+" ");
		}
	}
}

Q) Write a java program to display prime elements from given array?

input:
	6 2 12 5 15 7 9

output:
	2 5 7 


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={6,2,12,5,15,7,9};
		
		for(int n:arr)
		{
			boolean flag=true;
			for(int i=2;i<=n/2;i++)
			{
				if(n%i==0)
				{
					flag=false;
					break;
				}
			}
			if(flag==true)
				System.out.print(n+" ");
		}
	}
}


Q) Write a java program to display the array elements in sorting order?

input:
	6 2 12 5 15 7 9

output:
	2 5 6 7 9 12 15

 
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={6,2,12,5,15,7,9};
		
		Arrays.sort(arr);
		
		//display elements 
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
	}
}

Q) Write a java program to display the array elements in sorting order without using sort() method?

input:
	6 2 12 5 15 7 9

output:
	2 5 6 7 9 12 15


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={6,2,12,5,15,7,9};
		
		//ascending logic
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]<arr[j])
				{
					int temp = arr[i];
					arr[i]=arr[j];
					arr[j]=temp;
				}
			}
		}
		
		//display elements
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
		
	}
}

Q) Write a java program to display the array elements in descending order?

input:
	6 2 12 5 15 7 9

output:
	2 5 6 7 9 12 15

import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={6,2,12,5,15,7,9};
		
		Arrays.sort(arr); // 2 5 6 7 9 12 15 
		
		//reading reverse
		for(int i=arr.length-1;i>=0;i--)
		{
			System.out.print(arr[i]+" ");
		}
		
	}
}




Q) Write a java program to display the array elements in descending order without using sort() method?

input:
	6 2 12 5 15 7 9

output:
	2 5 6 7 9 12 15


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={6,2,12,5,15,7,9};
		
		//descending logic
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]>arr[j])
				{
					int temp = arr[i];
					arr[i]=arr[j];
					arr[j]=temp;
				}
			}
		}
		
		//display elements
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
		
	}
}

Assignment 
==========
Q) Write a java program to segregate array elements without using sort() method?

input:
	1 0 1 0 0 1 1 0 1 0 

output:
	0 0 0 0 0 1 1 1 1 1 





























































 



































































































