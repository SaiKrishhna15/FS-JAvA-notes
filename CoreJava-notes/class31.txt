Q) What is the difference between Abstraction and Encapsulation ?

Abstraction					Encapsulation
-------------					--------------
Hiding internal implementation and highlighting	The process of encapsulating or wrapping variables 	
the set of services is called abstraction.	and it's associate methods in a single entity is 
						called encapsulation.

Using abstract classes and interfaces we can 	Using access modifiers we can implements 
implements abstraction.				encapsulation.

It is used to hide the data.			It is used to protect the data.

It is a process of gaining the information.	It is a process of containing the information.

It solves the issue at design level.		It solves the issue at implementation level.




Is-A relationship 
=================
Is-A relationship is also known as inheritance.

Using extends keyword we can implements Is-A relationship.

The main objective of Is-A relationship is to provide reusability.

ex:
---
class Parent 
{
	public void methodOne()
	{
		System.out.println("Parent-MethodOne");
	}
}
class Child extends Parent
{
	public void methodTwo()
	{
		System.out.println("Child-MethodTwo");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.methodOne();
		
		Child c=new Child();
		c.methodOne();
		c.methodTwo();
		
		Parent p1=new Child();
		p1.methodOne();
		
		Child c1=new Parent(); // C.T.E 
		
	}
}
conclusion
-----------
Whenever parent containing property it goes to child. But whatever child containing the property it never goes back to parent. 

A parent reference can hold child object but child reference can't hold parent object.


Inheritance 
============
Inheritance is a mechanism in which one class will inherit the properties of another class.

Inheritance is a mechanism in which we will derived a class in the presence of existing class.

Using extends keyword we can implements inheritance.

The main objective of inheritance is to achieve reusability.

Diagram: class31.1

We have following list of inheritance.

1) Single Level inheritance 

2) Multi Level inheritance 

3) Multiple inheritance 

4) Hierarchical inheritance 

5) Hybrid inheritance 




1) Single Level inheritance 
---------------------------
If we derived a class in the presence of one base class is called single level inheritance.

Diagram:
		A (parent / super / base class)
		|
		|
		B (child / sub / derived class)

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a = new A();
		a.m1();
		
		B b = new B();
		b.m1();
		b.m2();
	}
}

ex:
---
class A 
{
	int i=10;
}
class B extends A 
{
	int j=20;
}
class Test
{
	public static void main(String[] args)
	{
		A a = new A();
		System.out.println(a.i);//10
		
		B b = new B();
		System.out.println(b.i+" "+b.j);//10  20
	}
}

2) Multi Level inheritance
--------------------------
If we derived a class in the presence of one base class and that class is derived from another base class is called multi level inheritance.

Diagram:
		A
		|
		|
		B
		|		
		|		
		C

class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends B
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a = new A();
		a.m1();
		
		B b = new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m2();
		c.m3();
	}
}

3) Multiple inheritance 
-------------------------
In java, we can't extends more then one class simultenously because java does not support multiple inheritance.
ex:
	class A 
	{
	}
	class B 
	{
	}
	class C extends A,B --> invalid 
	{
	}

But interface can extends more then one interface so we can achieve multiple inheritance through interfaces.
ex:
	interface A 
	{
	}
	interface B 
	{
	}
	interface C extends A,B
	{
	}	

If our class does not extends any other class then is a direct child class of Object class.

ex:				Diagram:	
			
	class A 			Object
	{				|
	}				|
					A 

If our class extends some other class then it is a indirect child class of Object class.

ex:				Diagram:

	class A 			Object 
	{				|
	}				|
	class B extends A  		A
	{				|
	}				|
					B

Java does not support cyclic inheritance.
ex:
	class A extends B 
	{
	}
	class B extends A 
	{
	}


Q) Why Java does not support multiple inheritance?

There may chance of raising ambiguity problem that's why java does not support multiple inheritance.
ex:
	P1.m1()				P2.m1()
	|------------------------------------|
			|
			C.m1()


4) Hierarchical inheritance
---------------------------
If we derived multiple classes by using one base class is called hierarchical inheritance.

Diagram:
				A 
				|
		|-------------------------------|
		B				C 

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends A
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a = new A();
		a.m1();
		
		B b = new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m3();
	}
}


5) Hybrid inheritance 
-------------------
Hybrid inheritance is a combination of more then two inheritance.

Java does not support hybrid inheritance.

Diagram:
				A 
				|
		|-------------------------------|
		B				C 
		|-------------------------------|
				|
				D 
		
Has-A relationship 
===================
Has-A relationship is also known as composition and aggregation.

There is no specific keyword to implements Has-A relationship but mostly we will use new operator.

The main objective of Has-A relationship is to provide reusability.
			
Has-A relationship will increase dependency between two components.

ex:
	class Trainer 
	{	
		- //Trainer specific functionality 
	}
	class Student 
	{
		Trainer t=new Trainer();
		-
	}

ex:
----
class Ihub 
{
	public String courseName()
	{
		return "Java FSD + AI + DSA + AWS";
	}
	public double courseFee()
	{
		return 30000d;
	}
	public String trainerName()
	{
		return "Niyaz Sir";
	}
}
class Usha 
{
	public void getCourseDetails()
	{
		Ihub i=new Ihub();
		System.out.println("Course Name :"+i.courseName());
		System.out.println("Course Fee :"+i.courseFee());
		System.out.println("Trainer Name :"+i.trainerName());
	}
}
class Student 
{
	public static void main(String[] args)
	{
		Usha u=new Usha();
		u.getCourseDetails();
	}
}

Composition 
===========
Without existing container object there is no chance of having contained object then the relationship between container and contained object is called composition which is strongly association.

Diagram: class31.2


aggregation
============
Without existing container object there is a chance of having contained object then the relationship between container and contained object is called aggregation which is loosely association.

Diagram: class31.3


















































