constructor overloading
=======================
Having same constructor name with different parameters or signatures in a single class is called constructor overloading.

ex:
---
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1 = new A();
		A a2 = new A(10);
		A a3 = new A(10.5d);
	}
}

this keyword 
============
A "this" keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables 

2) To refer current class methods

3) To refer current class constructors 


1) To refer current class variables 
------------------------------------
class A 
{
	//current class variables 
	int i=10;
	int j=20;
	
	A(int i,int j)
	{
		System.out.println(i+" "+j); //100 200
		System.out.println(this.i+" "+this.j); //10  20
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new A(100,200);
	}
}

2) To refer current class methods
----------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new A();
		a.m1();
	}
}

3) To refer current class constructors 
---------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new A(10.5d);
	}
}


super keyword 
==============
A "super" keyword is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables 

2) To refer super class methods 

3) To refer super class constructors 


1) To refer super class variables 
---------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A 
{
	int i=100;
	int j=200;
	B(int i,int j)
	{
		System.out.println(this.i+" "+this.j); //100 200
		System.out.println(super.i+" "+super.j);//10  20
		System.out.println(i+" "+j);//1000 2000
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);
	}
}

2) To refer super class methods 
--------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b =new B();
		b.m2();
	}
}

3) To refer super class constructors 
--------------------------------------
class A 
{
	A()
	{
		System.out.println("A-Const");
	}
}
class B extends A 
{
	B()
	{
		//super();
		System.out.println("B-Const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b = new B();
	}
}



Interfaces 
==========
Interface is a blue print of a class and it is a collection of zero or more abstract methods.

Interface contains only abstract methods.Hence it is known as purely abstract class.

Abstract methods are incomplete methods because they ends with semicolon and do not have any body.

ex:
	public abstract void methodOne();

It is not possible to create object for interfaces.

To write the implementation of abstract methods of an interface we will use implementation class.

It is possible to create object for implementation class because it contains method with body.

Interface contains only constants i.e public static final.

By default every abstract method is a public and abstract.
ex:
	void methodOne();

We can declare interface as follow.

syntax:
-------
	interface <interface_name>
	{
		-
		- // abstract methods 
		- // constants 
		-
	}


If we know Service Requirement Specification (SRS) then we need to use interface.

Diagram: class33.1

ex:
----
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	@Override 
	public void m1()
	{
		System.out.println("M1-Method");	
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.m1();
	}
}

ex:
---
interface A 
{
	public abstract void m1();
}

class Test 
{
	public static void main(String[] args)
	{
		//Anonymous inner class
		A a = new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we must override all metods otherwise we will get compile time error.

ex:
---
interface A 
{
	public abstract void show();
	public void display();
	abstract void see();
	void view();
}
class B implements A 
{
	@Override 
	public void show()
	{
		System.out.println("show-method");
	}
	@Override 
	public void display()
	{
		System.out.println("display-method");
	}
	@Override 
	public void see()
	{
		System.out.println("see-method");
	}
	@Override 
	public void view()
	{
		System.out.println("view-method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.show();
		a.display();
		a.see();
		a.view();
	}
}

In java, A class can't extends more then one class simultenously.

But interface can extends more then one interface so we can achieve multiple inheritance concept through interfaces.

ex:
---
interface A 
{
	void m1();
}
interface B 
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	@Override 
	public void m1()
	{
		System.out.println("M1-Method");
	}
	@Override 
	public void m2()
	{
		System.out.println("M2-Method");
	}
	@Override 
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		C c = new D();
		c.m1();
		c.m2();
		c.m3();
	}
}


A class can implements more than one interface.

ex:
--
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother 
{
	public void height()
	{
		float height = (Father.HT+Mother.HT)/2;
		System.out.println("Child Height :"+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c = new Child();
		c.height();
	}
}

Note:
----
According to Java 8 , Interface is a blue print of a class and it is a collection of abstract methods, default methods and static methods.


Marker interface 
================
Interface which does not have any methods or constants is called marker interface.

In general, empty interface is called marker interface.

We have following list of marker interface.
ex:
	Serializable 
	Cloneable 
	Remote 
	and etc.

Using marker interface we will get some ability to do.
































