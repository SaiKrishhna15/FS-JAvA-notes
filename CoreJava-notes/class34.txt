Abstract class 
==============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A abstract keyword is applicable for methods and classes but not for variables.

It is not possible to create object for abstract class.

To write the implementation of abstract methods of an abstract class we will use sub classes.

Abstract class contains instance variables.

By default every abstract method is a public and abstract.

We can declare abstract class as follow.

syntax:
-------
	abstract class <class_name>
	{
		-
		- // abstract methods 
		- // concrete methods 
		-		
	}

If we know partial implementation then we need to use abstract class.

ex:
---
abstract class Animal 
{
	//abstract method 
	public abstract void sound();
}
class Dog extends Animal 
{
	@Override 
	public void sound()
	{
		System.out.println("Bow Bow");
	}
}
class Test  
{
	public static void main(String[] args)
	{
		Dog d = new Dog();
		d.sound();
	}
}

ex:
---
abstract class Animal 
{
	//abstract method 
	public abstract void sound();
	
	//concrete method 
	public void activity()
	{
		System.out.println("Eating+Sleeping+Running");
	}
}
class Dog extends Animal 
{
	@Override 
	public void sound()
	{
		System.out.println("Bow Bow");
	}
}
class Test  
{
	public static void main(String[] args)
	{
		Dog d = new Dog();
		d.sound();
		d.activity();
	}
}

ex:
---
abstract class Plan 
{
	//instance variable 
	protected double rate; 
	
	//abstract method 
	public abstract void getRate();
	
	//concrete method 
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill  :"+(units*rate));
	}
}
class DomesticPlan extends Plan 
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan 
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);
		
		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}

Q) What is the difference between interface and abstract class?

interface					abstract class
-----------					----------------
To declare interface we will use interface	To declare abstract class we will use abstract  
keyword.					keyword.

It is a collection of abstract methods,		It is a collection of abstract methods and  
default methods and static methods.		concrete methods.

It contains constants.				It contains instance variables.

It does not allow constructors.			It allows constructors.

It does not allow blocks.			It allows blocks.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

To write the implementation of abstract 	To write the implementation of abstract methods
methods we will use implementation classes.	we will use sub classes.

If we know only specification then we need 	If we know partial implementation then we need to 
to use interface.				use abstract class.


Packages 
========
A package is a collection of classes,interfaces,enums and annotations.

Here enum is a special class and annotation is a special interface.

A package is a also known as a folder or a directory.

In java, a package is divided into two types.

1) Predefined packages 

2) Userdefined packages 

1) Predefined packages 
----------------------
Built-In packages are called predefined packages.
ex:
	java.lang
	java.io 
	java.time 
	java.text 
	java.util 
	java.util.stream
	java.sql
	javax.servlet
	and etc

2) Userdefined packages 
----------------------
Packages which are created by the user based on the application requirements are called predefined packages.

We can declare predefined package as follow.

syntax:
	package <package_name>;

It always recommanded to declare a package name in the reverse order of url.

ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test 
{
	public static void main(String[] args)
	{
		Calendar c = Calendar.getInstance();
		int h = c.get(Calendar.HOUR_OF_DAY);
		
		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else
			System.out.println("Good Night");
	}
}

To compile above program we will use below command.
ex:

		current directory 
		    |
	javac  -d   .   Test.java
		|
	destination 
	folder 

To execute above program we will use below command.
ex:
	java   com.ihub.www.Test
			|     |
		package name  classname


Wrapper classes 
===============
The main objective of wrapper classes are.

1) To wrap primitive type to wrapper object and vice versa.

2) To defined several utility methods. 

ex:
	primitive type			wrapper object
	--------------			---------------
	byte 				Byte 
	short				Short
	int				Integer
	long				Long
	float				Float
	double 				Double 
	boolean 			Boolean 	
	char 				Character

constructor 
-----------
Every wrapper class contains two constructors. One will take corresponding primitive as an argument and another takes corresponding string as an argument.

ex:
	wrapper class			constructor 
	------------			-----------
	Byte 				byte or String 
	Short				short or String 
	Integer 			int or String 
	Long				long or String 
	Float				float or String 
	Double 				double or String 
	Boolean 			boolean or String 
	Character			char 

ex:
----

class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1); //10
		
		Integer i2=new Integer("20");
		System.out.println(i2); //20
	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1); // true 
		
		Boolean b2=new Boolean("false");
		System.out.println(b2);// false
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character c = new Character('a');
		System.out.println(c); // a 
	}
}


Utility methods 
================

1) valueOf() 
-----------
It is used to convert primitive type to wrapper object.
The process of converting primitive type to wrapper object is called autoboxing.
ex:

class Test 
{
	public static void main(String[] args)
	{
		int a=10;
		Integer i=new Integer(a);
		System.out.println(i); //10
		
		// or 
			
		Integer i2=Integer.valueOf(20);
		System.out.println(i2); //20
	}
}


2) xxxValue() 
----------
It is used to convert wrapper object to primitive type.
The process of converting from wrapper object to primitive type is called autounboxing.
ex:
---

class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		int i = i1;
		System.out.println(i); //10
		
		// or 
		
		Integer i2=new Integer(20);
		byte b = i2.byteValue();
		System.out.println(b); // 20
	}
}



























































