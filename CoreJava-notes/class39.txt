StringBuffer
============
If our content change frequently then it is never recommanded to use String because for every change a new object will be created.

To overcome this limitation we need to use StringBuffer.

In StringBuffer , all the required changes will be done in a same object only.

constructor 
------------

1) StringBuffer sb = new StringBuffer()
----------------------------------------
It creates empty StringBuffer object with default initial capacity of 16.

If capacity reaches to maximum capacity then new capacity will be created with below formulea.

 ex:
	new capacity  = current_capacity + 1 * 2;

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb = new StringBuffer();
		
		System.out.println(sb.capacity()); // 16
		
		sb.append("abcdefghijklmnop");
		
		System.out.println(sb.capacity()); // 16
		
		sb.append("qr");
		System.out.println(sb.capacity()); // (16+1*2) = 34
	}
}


2) StringBuffer sb = new StringBuffer(int capacity)
-----------------------------------------------------
It creates StringBuffer object with given initialized capacity.

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb = new StringBuffer(19);
		
		System.out.println(sb.capacity()); // 19
		
	}
}


3) StringBuffer sb = new StringBuffer(String s)
---------------------------------------------
It creates StringBuffer object equivalent to String.

Here capacity will be created with below formulea.

ex:
	capacity = s.length() + 16;

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb = new StringBuffer("ihub");
		
		System.out.println(sb.capacity()); // 4+16=20
		
	}
}


Q) Write a java program to reverse of a given string?

input:
	hello 

output:
	olleh 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="hello";
		
		StringBuffer sb=new StringBuffer(str);
		
		String rev = sb.reverse().toString();
		
		System.out.println(rev);
	}
}


Q) Write a java program to check given string is palindrome or not?

input:
	racar 

output:
	It is a palindrome string 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="racar";
		
		StringBuffer sb=new StringBuffer(str);
		
		String rev = sb.reverse().toString();
		
		if(str.equals(rev))
			System.out.println("It is a palindrome string");
		else
			System.out.println("It is not a palindrome string");
	}
}


Q) Write a java program to display the string in a given format?

input:
	ABBCCCDDDD

output:
	A1B2C3D4


class Test  
{
	public static void main(String[] args) 
	{
		String str="ABBCCCDDDD";
		
		StringBuffer sb = new StringBuffer();
		
		int cnt = 1;
		
		for(int i=0;i<str.length();i++)
		{
			if(i<str.length()-1 && str.charAt(i) == str.charAt(i+1))
			{
					cnt++;
			}
			else
			{
				sb.append(str.charAt(i)).append(cnt);
				cnt=1;
			}	
		}
		
		//display
		System.out.println(sb.toString());
	}
}


Q) Write a java program to multiply two arrays?

input:
	4 6 5 
	2 1 

output:
	9765 (465*21)


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr1 ={4,6,5}; 
		int[] arr2 ={2,1}; 
		
		//caller method 
		int a = Integer.parseInt(arrayToString(arr1));
		int b = Integer.parseInt(arrayToString(arr2));
		System.out.println(a*b);
	}
	//callie method 
	public static String arrayToString(int[] arr)
	{
		StringBuffer sb = new StringBuffer();
		for(int i:arr)
		{
			sb.append(i);
		}
		
		return sb.toString();
	}
}

Q) Write a java program to count number of 2's ?

input:
	22

output:
	6 (2,12,20,21,22)


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int num=22;
		
		StringBuffer sb = new StringBuffer();
	
		for(int i=1;i<=num;i++)
		{
			sb.append(i);
		}
		
		int cnt=0;
		for(int i=0;i<sb.length();i++)
		{
			int n = Character.getNumericValue(sb.charAt(i));
			if(n==2)
			{
				cnt++;
			}
		}
		System.out.println(cnt);
	}
}

StringBuilder 
=============
StringBuilder is exactly same as StringBuffer with following differences.

StringBuffer					StringBuilder 
--------------					---------------
Methods are synchronized.			Methods are not synchronized.


At a time only one thread is allowed to 	Multiple threads are allowed to operate on	
operate on StringBuffer object. Hence 		StringBuilder object. Hence StringBuilder is 
StringBuffer is thread safe.			not thread safe.

Waiting time of a thread will increase 		There is no waiting threads effectively 
effectively performance is low.			performance is high.

Note:
------
If our content not change frequently then we need to use String.

If our content change frequently where thread safety is required then we need to use StringBuffer.

If our content change frequently where thread safety is not required then we need to use StringBuilder.


Q) Write a java program to display reverse of a given number?

input:
	123

output:
	321

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int num=123;
		
		//convert number to string 
		String str = Integer.toString(num);
		
		StringBuilder sb = new StringBuilder(str);
		
		String rev = sb.reverse().toString();
		
		//converting string to number 
		num = Integer.parseInt(rev);
		
		System.out.println(num);
	}
}

StringTokenizer 
==================
StringTokenizer is a class which is present in java.util package.

It is used to tokenize the string irrespective of regular expression.

We can declare StringTokenizer object as follow.

ex:
	StringTokenizer st = new StringTokenizer(String s,RegularExpression reg);

StringTokenizer class contains following methods.

ex:
	public boolean hasMoreTokens()
	public String nextToken()
	public int countTokens();
	public boolean hasMoreElements();
	public Object nextElement();

ex:
----
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st = new StringTokenizer("this is java class"," ");
		System.out.println(st.countTokens());
	}
}

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st = new StringTokenizer("this is java class"," ");
		
		while(st.hasMoreTokens())
		{
			String s = st.nextToken();
			System.out.println(s);
		}
	}
}

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st = new StringTokenizer("this is java class"," ");
		
		while(st.hasMoreElements())
		{
			String s = (String) st.nextElement();
			System.out.println(s);
		}
	}
}

ex:
----
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st = new StringTokenizer("9,99,999",",");
		
		while(st.hasMoreElements())
		{
			String s = (String) st.nextElement();
			System.out.println(s);
		}
	}
}

Random class 
=============
Random class present in java.util package.

Random class is used to generate pseudo-random numbers in java.

ex:
---
import java.util.Random;
class Test  
{
	public static void main(String[] args) 
	{
		Random r = new Random();
		
		int num = r.nextInt();
		
		System.out.println(num);
	}
}

ex:
---
import java.util.Random;
class Test  
{
	public static void main(String[] args) 
	{
		Random r = new Random();
		
		int num = r.nextInt(100);
		
		System.out.println(num);
	}
}

Exception Handling 
==================

Q) What is the difference between Exception and Error?

Exception 
----------
Exception is a problem for which we can provide solution programmatically.
Exception will occur due to syntax errors.

ex:
	FileNotFoundException 
	IllegalArgumentException 
	NullPointerException 
 
Error 
------
Error is a problem for which we can't provide solution programmatically.
Error will occur due to lack of system resources.

ex:
	StackOverFlowError
	OutOfMemoryError 
	LinkageError 
	
As a part of java application development. It is a responsibility of a programmer to provide smooth termination for every java program.


We have two types of terminations.

1) Smooth termination or graceful termination 

2) Abnormal termination 

1) Smooth termination
------------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World");
	}
}

2) Abnormal termination 
------------------------
During the program execution suppose if we are getting some interruptions in the middle of the program such type of termination is called abnormal termination.

ex:


class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

If any exception raised in our program we must and should handle that exception otherwise our 
program will terminates abnormally.

Exception will display name of the exception , description of the exception and line number of the exception.


Exception 
==========
It is a unwanted , unexpected event which disturbs normal flow of our program.

Exceptions always raised at runtime so they are also known as runtime events.

The main objective of exception handling is to provide graceful termination.

In java, exceptions are divided into two types.

1) Predefined exceptions 

2) Userdefined exceptions





























