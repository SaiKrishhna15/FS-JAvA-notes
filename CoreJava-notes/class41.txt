Garbage Collector 
==================
Garbage collector consider as Deamon Thread.

Thread which is running in the background is called daemon thread. The work of deamon thread to provide services to non-deamon threads.

It is a feature that automatically manages memory allocation and deallocation for objects which we declared in our program.

There are two ways to call garbage collector in java.

1) System.gc() 

2) Runtime.getRuntime().gc()

ex:
----
class Test  
{
	//instance variable 
	int i=10;
	
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i); // 10
		
		t=null;
		System.gc();
	}
	
	public void finalize()
	{
		System.out.println("Finalized Method");
	}
}

ex:
----
class Test  
{
	//instance variable 
	int i=10;
	
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i); // 10
		
		t=null;
		Runtime.getRuntime().gc();
	}
	
	public void finalize()
	{
		System.out.println("Finalized Method");
	}
}



java.io package
================

File 
======
A File class will check is there any "abc.txt" file exist or not.If it is not available then it won't create any physical file.If it is available then it simply refers to that file.

ex:
	File f = new File("abc.txt");


import java.io.*;
class Test  
{
	public static void main(String[] args) 
	{
		File f=new File("abc.txt");
		
		System.out.println(f.exists()); // false 
	}
}

Using File object we can create a physical file.

ex:
----
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		File f=new File("abc.txt");
		
		System.out.println(f.exists()); // false 
		
		f.createNewFile();
		
		System.out.println(f.exists()); // true 
	}
}

Using File object we can create directory also.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		File f=new File("ihub");
		
		System.out.println(f.exists()); // false 
		
		f.mkdir();
		
		System.out.println(f.exists()); // true 
	}
}

Q) Write a java program to create "cricket" folder and inside create "abc.txt" file?

ex:
----
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		File f1=new File("cricket");
		
		f1.mkdir();
		
		File f2=new File("cricket","abc.txt");
		
		f2.createNewFile();
		
		System.out.println("please check the location");
	}
}


FileWriter 
===========
It is used to insert character oriented data in a file.

constructor 
----------
	File f=new File("aaa.txt");
	FileWriter fw=new FileWriter(f);

	or

	FileWriter fw=new FileWriter("aaa.txt");

	If "aaa.txt" file in not available then FileWriter will create a physical file.

Methods 
--------

1) write(int ch)
-----------------
	It is used to insert single character in a file.

2) write(char[] ch)
-------------------
	It is used to insert set of characters in a file.

3) write(String s)
--------------
	It is used to insert string in a file.

4) flush() 
---------
	It gives guaranttee that last character of a file is also inserted.

5) close() 
---------
	It is used to close FileWriter object.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		FileWriter fw=new FileWriter("aaa.txt");
		
		fw.write(98); //b
		
		fw.write("\n");
		
		char[] ch={'a','b','c'};
		fw.write(ch);
		
		fw.write("\n");
		
		fw.write("ihub\ntalent");
		
		fw.flush();
		
		fw.close();
		
		System.out.println("Please check the location");
	}
}

FileReader 
===========
It is used to read character oriented data from a file.

constructor 
-----------
	File f=new File("aaa.txt");
	FileReader fr=new FileReader(f);

	or 

	FileReder fr=new FileReader("aaa.txt");

Methods 
-------

1) read() 
---------
	It is used to read next character from a file and returns unicode value. If next character 
	is not available then it will return -1.

2) read(char[] ch)
-------------------
	It is used to read collection of characters from a file.

3) close() 
---------
	It is used to close FileReader object.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		FileReader fr=new FileReader("aaa.txt");
		
		int i = fr.read();
		
		while(i!=-1)
		{
			System.out.print((char)i);
			
			i = fr.read();
		}
		
		fr.close();
	}
}

ex:
----
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		FileReader fr=new FileReader("aaa.txt");
		
		char[] ch=new char[100];
		
		fr.read(ch);
		
		//for each loop 
		for(char c:ch)
		{
			System.out.print(c);
		}
		
		fr.close();
	}
}

Note:
=====
While writing the data in a file by using FileWriter we need to insert line seperators which is very headache for the programmer.

While reading the data from a file by using FileReader we need to read character by character which is not convenient to the programmer.

To overcome this limitations we need to use BufferedWriter and BufferedReader.




BufferedWriter 
==============
It is used to insert character oriented data in a file.

constructor
-----------
BufferedWriter can't communicate with files directly. It takes the supports of writer object.
ex:
	FileWriter fw=new FileWriter("bbb.txt");
	BufferedWriter bw=new BufferedWriter(fw);

	or 

	BufferedWriter bw=new BufferedWriter(new FileWriter("bbb.txt"));

Methods 
--------
1) write(int ch)
-----------------
	It is used to insert single character in a file.

2) write(char[] ch)
-------------------
	It is used to insert set of characters in a file.

3) write(String s)
--------------
	It is used to insert string in a file.

4) flush() 
---------
	It gives guaranttee that last character of a file is also inserted.

5) close() 
---------
	It is used to close FileWriter object.

6) newLine()
-----------
	It is used to insert a new line in a file.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		BufferedWriter bw=new BufferedWriter(new FileWriter("bbb.txt"));
		
		bw.write(98); //b
		
		bw.newLine();
		
		char[] ch={'a','b','c'};
		bw.write(ch);
		
		bw.newLine();
		
		bw.write("ihubtalent");
		
		bw.flush();
		
		bw.close();
		
		System.out.println("Please check the location");
	}
}



BufferedReader 
=================
It is a enhanced reader to read character oriented data from a file.

contructor
----------
BufferedReader class can't communicate with files directly. It takes the support of Reader object.
ex:
	FileReader fr=new FileReader("bbb.txt");
	BufferedReader br=new BufferedReader(fr);

	or 
	
	BufferedReader br=new BufferedReader(new FileReader("bbb.txt"));


The main advantage of BufferedReader over FileReader is we can read line by line instead of character by character.

Methods 
-------

1) read() 
---------
	It is used to read next character from a file and returns unicode value. If next character 
	is not available then it will return -1.

2) read(char[] ch)
-------------------
	It is used to read collection of characters from a file.

3) close() 
---------
	It is used to close FileReader object.

4) readLine()
-------------
	It is used to read next line from a file. If next line is not available then it will return 
	null.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		BufferedReader br=new BufferedReader(new FileReader("bbb.txt"));
		
		String line = br.readLine();
		
		while(line!=null)
		{
			System.out.println(line);
			
			line = br.readLine();
		}
		
		br.close();
	}
}

PrintWriter 
============
It is a enhanced writer to write character oriented data in a file.

constructor 
-----------
PrintWriter can communicate with files directly as well as it takes the support of writer object.

ex:
	PrintWriter pw=new PrintWriter("ccc.txt");

	or 

	PrintWriter pw=new PrintWriter(new FileWriter("ccc.txt"));

The main advantage of PrintWriter over FileWriter and BufferedWriter is , using PrintWriter we can insert any type of data. Specially when we want to insert any primitive values. 

Methods 
-------
write(int ch)
write(char[] ch)
write(String s)
flush()
close() 

or 

println(int i)
println(double d)
println(char ch)
println(String s)
println(boolean b)

or 

print(int i)
print(double d)
print(char ch)
print(String s)
print(boolean b)

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)throws IOException 
	{
		PrintWriter pw=new PrintWriter("ccc.txt");
		
		pw.write(98); //b 
		pw.println(98); // 98 
		
		pw.println(true); // true 
		
		pw.println('a'); // a 
		
		pw.println(10.56d); // 10.56
		
		pw.println("Hi");
		
		pw.flush();
		
		pw.close();
		
		System.out.println("Please check the location");
	}
}

Various ways to provide inputs from keyboard
============================================
We have following ways to provide inputs from keyboard.

1) Command line argument 

2) BufferedReader class 

3) Console class 

4) Scanner class 


1) Command line argument
-------------------------
class Test 
{
	public static void main(String[] args)
	{
		String name = args[0];
		
		System.out.println("Welcome :"+name);
	}
}
o/p:
	javac Test.java
	java  Test  JackMa


2) BufferedReader class
------------------------
BufferedReader class present in java.io package.

To create a BufferedReader object we need to use InputStreamReader object as a parameter which is embedded with System.in.

ex:
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

To read the inputs from console , BufferedReader having readLine() method.

ex:
----
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		System.out.println("Enter the Name :");
		String name = br.readLine();
		
		System.out.println("Welcome :"+name);
	}
}

3) Console class 
-----------------
Console class present in java.io package.

To create a Console object we need to console() method of System class.

ex:
	Console c = System.console();

To read the inputs from console , Console having readLine() method.

ex:
---
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		Console c=System.console();

		System.out.println("Enter the Name :");
		String name = c.readLine();
		
		System.out.println("Welcome :"+name);
	}
}


4) Scanner class 
-----------------
Scanner class present in java.util package.

We can create Scanner class object as follow.

ex:
	Scanner sc = new Scanner(System.in);

To read inputs from console we need to following methods.
ex:
	next()
	nextLine()
	nextInt()
	nextFloat()
	nextDouble()
	and etc.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the No :");
		int no = sc.nextInt();
		
		System.out.println("Enter the Name :");
		String name = sc.next();
		
		System.out.println("Enter the fee :");
		double fee = sc.nextDouble();
		
		System.out.println(no+" "+name+" "+fee);
	}
}































	




















































 