Serialization 
==============
The process of storing object data and into a file is called serialization.

Converting object state to file state is called serialization. 

To perform serialization we required ObjectOutputStream and FileOutputStream class.

We can perform serialization only for serialized object.

To create a serialized object, a class must implements java.io.Serializable interface.

Diagram: class42.1

ex:
----
import java.io.*;
class Person implements Serializable
{
	private int age;
	private String name;
	private String address;
	
	Person(int age,String name,String address)
	{
		this.age=age;
		this.name=name;
		this.address=address;
	}
	
	public String toString()
	{
		return "Person["+age+","+name+","+address+"]";
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Person p = new Person(45,"Alan","Texas");
		
		try(ObjectOutputStream ostream = new 
				ObjectOutputStream(new FileOutputStream("D:\\abc.txt"));)
		{
			ostream.writeObject(p);	
			
			System.out.println("Serialization Done");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}


If we don't need serialization on perticular variable then we need to declare that variable as transient. But JVM will store default value for the variable.

ex:
---


import java.io.*;
class Person implements Serializable
{
	private int age;
	private String name;
	transient private String address;
	
	Person(int age,String name,String address)
	{
		this.age=age;
		this.name=name;
		this.address=address;
	}
	
	public String toString()
	{
		return "Person["+age+","+name+","+address+"]";
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Person p = new Person(45,"Alan","Texas");
		
		try(ObjectOutputStream ostream = new 
				ObjectOutputStream(new FileOutputStream("D:\\abc.txt"));)
		{
			ostream.writeObject(p);	
			
			System.out.println("Serialization Done");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

Deserialization 
================
The process of taking the data from a file and representing an object is called deserialization.

Converting file state to object state is called deserialization.

To perform deserialization we required ObjectInputStream and FileInputStream class.

We can perform deserialization only for serialized object.

We can create serialized object, if our class implements java.io.Serializable interface.

Diagram: class42.2

ex:
---
import java.io.*;
class Person implements Serializable
{
	private int age;
	private String name;
    transient private String address;
	
	Person(int age,String name,String address)
	{
		this.age=age;
		this.name=name;
		this.address=address;
	}
	
	public String toString()
	{
		return "Person["+age+","+name+","+address+"]";
	}
}
class Test 
{
	public static void main(String[] args)
	{
		
		try(ObjectInputStream istream = new 
				ObjectInputStream(new FileInputStream("D:\\abc.txt"));)
		{
			Person p = (Person)istream.readObject();	
			
			System.out.println(p);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

Generics 
=========
Arrays are typesafe.

It means we can give guarantee that what type of elements are present in array.

ex:
	int[] arr=new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;

If requirement is there to store string values then it is recommanded to use String[] array.

ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	sarr[2]=10;   //invalid 

At the time of retrieving the data from array we don't need to perform typecasting.

ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	-
	-
	String val = sarr[0];


Collections are not typesafe.

It means we can't give guarantee that what type of elements are present in Collections.

If requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but somtimes our program get failure.

ex:
	ArrayList al = new ArrayList();
	al.add("Hi");
	al.add("Bye");
	al.add(10);

At the time of retrieving the data from Collections compulsary we need to peform typecasting.

ex:
	ArrayList al = new ArrayList();
	al.add("Hi");
	al.add("Bye");
	al.add(10);
	-
	-
	String val = (String)al.get(0);	

To over come above limitations Sun Micro System introduced Generics concept in 1.5v.

The main objective of Generics are

1) To make Collections as typesafe.

2) To avoid typecasting problem.

java.util package 
=================

Q) What is the difference between Arrays and Collections ?

Arrays						Collections 
----------					------------
It is a collection of homogeneous data 		It is a collection of homogeneous and 
elements.					hetrogeneous data elements.

It is fixed in size.				It is growable in nature.

Performance point of view arrays are		Memory point of view Collections are recommanded 
recommanded to use.				to use.

Arrays not implemented based on data 		Collections are implemented based on data 
structure concept. Hence we can't expect 	structure concept. Hence we can expect 
any ready made methods.				ready made methods.

Arrays can hold primitive types and 		Collection can hold only object types.
object types.

Collection Framework 
====================
It defines several classes and interfaces to represent group of objects in a single entity.

ex:
	Java			C++
	-----			----
	Collections		Standard Template Library (STL).
	Collection Framework	Containers	

Collection
===========
Collection is an interface which is present in java.util package.

It is a root interface for entire Collection Framework.

If we want to represent group of individual objects in a single entity then we need to use Collection interface.

Collection interface contains some common methods which are applicable for entire Collection objects.

ex:
	cmd> javap  java.util.Collection 


	public abstract int size();
  	public abstract boolean isEmpty();
  	public abstract boolean contains(java.lang.Object);
  	public abstract java.util.Iterator<E> iterator();
  	public abstract java.lang.Object[] toArray();
  	public abstract boolean add(E);
  	public abstract boolean remove(java.lang.Object);
  	public abstract boolean containsAll(java.util.Collection<?>);
  	public abstract boolean addAll(java.util.Collection<? extends E>);
 	public abstract boolean removeAll(java.util.Collection<?>);
  	public default boolean removeIf(java.util.function.Predicate<? super E>);
  	public abstract boolean retainAll(java.util.Collection<?>);
  	public abstract void clear();
  	and etc.


List 
======
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: class42.3


ArrayList
------------
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		ArrayList al = new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(10);
		System.out.println(al);//[one,two,three,one,10]
		
		al.add(null);
		System.out.println(al);//[one,two,three,one,10,null]
	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(null);
		System.out.println(al);//[one,two,three,one,null]
	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		for(int i=0;i<al.size();i++)
		{
			String s = al.get(i);
			
			System.out.println(s);
		}
	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		System.out.println(al.isEmpty());//false 
		
		al.add(1,"gogo");
		System.out.println(al);//[one, gogo, two, three]
		
		System.out.println(al.contains("gogo")); // true 
		
		al.remove("gogo");
		System.out.println(al); //[one, two, three]
		
		al.clear();
		System.out.println(al); //[]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<String> list = new ArrayList<String>();
		list.add("one");
		list.add("two");
		list.add("three");
		System.out.println(list);//[one, two, three]
	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list = List.of(5,8,1,2,9);
		
		System.out.println(list);
		
		//for each loop 
		for(int i:list)
		{
			System.out.println(i);
		}
		
	}
}

Q) Write a java program to display intersect elements?

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		ArrayList<String> l1=new ArrayList<String>();
		l1.add("css");
		l1.add("java");
		l1.add("springboot");
		l1.add("oracle");
		l1.add("html");
		System.out.println(l1);//[css, java, springboot, oracle, html]
		
		ArrayList<String> l2=new ArrayList<String>();
		l2.add("css");
		l2.add("python");
		l2.add("django");
		l2.add("oracle");
		l2.add("html");
		System.out.println(l2);//[css, python, django, oracle, html]
		
		l1.retainAll(l2);
		
		System.out.println(l1);//[css, oracle, html]
	}
}




































































































































