LinkedList 
===========
The underlying data structure is doubly linkedlist.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and Deque interface.

A LinkedList contains following methods.

ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll = new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one, two, three]
		
		ll.add("one");
		System.out.println(ll); // [one,two,three,one]
		
		ll.add(10);
		System.out.println(ll); // [one,two,three,one,10]
		
		ll.add(null);
		System.out.println(ll); //[one,two,three,one,10,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll = new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one, two, three]
		
		ll.add("one");
		System.out.println(ll); // [one,two,three,one]
		
		ll.add(null);
		System.out.println(ll); //[one,two,three,one,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll = new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one, two, three]
		
		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll); // [gogo,one,two,three,jojo]
		
		System.out.println(ll.getFirst()); // gogo
		System.out.println(ll.getLast()); // jojo 
		
		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1 = new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1); // [one, two, three]
		
		LinkedList<String> ll2 = new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2); // [raja]
		
		ll2.addAll(ll1);
		System.out.println(ll2); //[raja,one,two,three]

		System.out.println(ll2.containsAll(ll1)); // true 
		
		ll2.removeAll(ll1);
		System.out.println(ll2); //[raja]
	}
}

Q) What is the difference between ArrayList and LinkedList ?

ArrayList					LinkedList 
-------------					------------
The underlying data structure is resizable 	The underlying data structure is doubly 
array or growable array.			linkedlist.

It is best for storing and retrieving the 	It is best for manipulating the elements.	
elements.

Memory location of ArrayList elements are 	Memory location of LinkedList elements are not 
contigenous.					contigenous.

Whenever ArrayList is initialized a default 	There is no case of default capacity.
capacity 10 is assigned to it.


Vector 
=========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible. 

Hence every method present in Vector is synchronized.Hence Vector is thread safe.

Vector contains following methods.

ex:
	public synchronized E firstElement();
  	public synchronized E lastElement();
  	public synchronized void setElementAt(E, int);
  	public synchronized void removeElementAt(int);
  	public synchronized void insertElementAt(E, int);
  	public synchronized void addElement(E);
  	public synchronized boolean removeElement(java.lang.Object);
  	public synchronized void removeAllElements();

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v = new Vector();
		
		System.out.println(v.capacity());
		
		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		
		System.out.println(v.firstElement());
		System.out.println(v.lastElement());
		
		v.removeElementAt(5);
		System.out.println(v); // [1, 2, 3, 4, 5, 7, 8, 9, 10]
		
		v.removeAllElements();
		System.out.println(v); //[]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v = new Vector();
		
		System.out.println(v.capacity());
		
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		
		System.out.println(v.get(0));
		System.out.println(v.get(v.size()-1));
		
		v.remove(5);
		System.out.println(v); // [1, 2, 3, 4, 5, 7, 8, 9, 10]
		
		v.clear();
		System.out.println(v); //[]
	}
}





















