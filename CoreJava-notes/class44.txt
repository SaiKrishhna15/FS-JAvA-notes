Q) What is the difference between ArrayList and Vector?

ArrayList						Vector 
------------						--------
It is a non-legacy class.				It is a legacy class.

Methods are not synchronized.				Methods are synchronized.

Multiple threads are allowed to operate on 		At a time only one thread is allowed to 
ArrayList object. Hence ArrayList is not 		operate on Vector object. Hence Vector is 
thread safe.						thread safe.

Effectively performance is high because there 		Effective performance is low because we 
is no waiting threads.					have waiting threads.

It is introduced in 1.2v.				It is introduced in 1.0v.

Stack 
=======
It is a child class of Vector class.

If we depend upon Last In First Out order then we need to use Stack.

constructor 
-----------
	Stack s = new Stack();

Methods 
---------
1) push(E)
-----------
	It is used to push the element in a stack.

2) pop() 
---------
	It is used to pop the element from stack.

3) peek() 
-------
	It returns toppest element from stack.

4) isEmpty()
-----------
	It is used to check stack is empty or not.

5) search(E) 
-----------
	It returns offset value if element is found otherwise it will return -1.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Stack<String> s = new Stack<String>();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s); //[A,B,C]
		
		s.pop();
		System.out.println(s); //[A,B]
		
		System.out.println(s.peek());// B
		
		System.out.println(s.isEmpty());//false 
		
		System.out.println(s.search("S")); // -1 
		
		System.out.println(s.search("A"));//2
	}
}

Interview Questions 
====================

Q) Write a java program to sort the list?

input:
	6 9 1 3 5 2 

output:
	1 2 3 5 6 9 


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = Arrays.asList(6,9,1,3,5,2);
		
		Collections.sort(list);
		
		for(int i:list)
		{
			System.out.print(i+" ");
		}
	}
}


Q) Write a java program to reverse the list?

input:
	6 9 1 3 5 2 

output:
	2 5 3 1 9 6 

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = Arrays.asList(6,9,1,3,5,2);
		
		Collections.reverse(list);
		
		for(int i:list)
		{
			System.out.print(i+" ");
		}
	}
}


Q) Write a java program to make a list as synchronized?


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = Arrays.asList(6,9,1,3,5,2);
		
		List<Integer> newList = Collections.synchronizedList(list);
		
		for(int i:newList)
		{
			System.out.print(i+" ");
		}
	}
}


Q) Write a java program to store students information inside List?

import java.util.*;

class Student 
{
	private int studId;
	private String studName;
	private double studFee;
	
	//parameterized constructor 
	Student(int studId, String studName, double studFee)
	{
		this.studId=studId;
		this.studName=studName;
		this.studFee=studFee;
	}
	
	public String toString()
	{
		return studId+" "+studName+" "+studFee;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Student> list = new ArrayList<Student>();
		list.add(new Student(101,"Alan",1000d));
		list.add(new Student(102,"Ben",2000d));
		list.add(new Student(103,"Jack",3000d));
		
		for(Student s:list)
		{
			System.out.println(s);	
		}
	}
}

Q) Write a java program to check given string is balanced or not?

input:
	{[()]}

output:
	It is a balanced string 

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		String str="{[()]}}";
		
		//caller method 
		if(isBalanced(str.toCharArray()))
			System.out.println("It is a balanced string");
		else
			System.out.println("It is not a balanced string");
	}
	
	//callie method 
	public static boolean isBalanced(char[] carr)
	{
		Stack<Character> s=new Stack<Character>();
		
		for(char ch:carr)
		{
			if(ch=='{' || ch=='[' || ch=='(')
			{
				s.push(ch);
			}
			else if(ch==')' && !s.isEmpty() && s.peek()=='(')
			{
				s.pop();
			}
			else if(ch==']' && !s.isEmpty() && s.peek()=='[')
			{
				s.pop();
			}
			else if(ch=='}' && !s.isEmpty() && s.peek()=='{')
			{
				s.pop();
			}
			else
			{
				return false;
			}
		}
		return s.isEmpty();
	}
}


Set 
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are not allowed and order is not preserved then we need to use Set interface.

Diagram: class44.1


HashSet 
=========
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		HashSet hs=new HashSet();
		hs.add("one");
		hs.add("nine");
		hs.add("five");
		hs.add("six");
		System.out.println(hs);//[nine, six, one, five]
		
		hs.add("one");
		System.out.println(hs); //[nine, six, one, five]
		
		hs.add(10);
		System.out.println(hs); //[nine, six, one, 10, five]
		
		hs.add(null);
		System.out.println(hs); //[null, nine, six, one, 10, five]
	}
}

LinkedHashSet 
==============
It is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

HashSet						LikedHashSet
-------------					--------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable 
						and LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2v.			It is introduced in 1.4v.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		LinkedHashSet lhs=new LinkedHashSet();
		lhs.add("one");
		lhs.add("nine");
		lhs.add("five");
		lhs.add("six");
		System.out.println(lhs);//[one,nine,five,six]
		
		lhs.add("one");
		System.out.println(lhs); //[one,nine,five,six]
		
		lhs.add(10);
		System.out.println(lhs); //[one,nine,five,six,10]
		
		lhs.add(null);
		System.out.println(lhs); //[one,nine,five,six,10,null]
	}
}


TreeSet 
=========
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes sorting order of object.

Hetrogeneous objects are not allowed. If we try to insert then we will get ClassCastException.

Null insertion is not possible otherwise we will get NullPointerException.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet ts=new TreeSet();
		ts.add(5);
		ts.add(1);
		ts.add(10);
		ts.add(7);
		System.out.println(ts);//[1,5,7,10]
		
		ts.add(1);
		System.out.println(ts);//[1,5,7,10]
		
		//ts.add("hi");
		//System.out.println(ts);//R.E ClassCastException
		
		//ts.add(null);
		//System.out.println(ts); //R.E NullPointerException
	}
}

Q) What is the difference between Comparable and Comparator interface?

Comparable 
------------
Comparable is an interface which is present in java.lang package.

If we depend upon default natural storing order then we need to use Comparable interface.

Comparable interface contains only one method i.e compareTo().

ex:
	obj1.compareTo(obj2)

	It returns -ve if obj1 comes before obj2 
	It returns +ve if obj1 comes after obj2
	It returns 0 if both objects are same

ex:
----
class Test 
{
	public static void main(String[] args)
	{
		System.out.println("A".compareTo("Z")); //-25
		
		System.out.println("Z".compareTo("A")); // 25
		
		System.out.println("K".compareTo("K")); // 0
	}
}

Comparator
-----------
Comparator interface present in java.util package.

If we depend upon customized sorting order then we need to use Comparator interface.

Comparator interface contains following two methods i.e compare() and equals() method.

ex:
	public int compare(Object obj1,Object obj2)

	It returns +ve if obj1 comes before obj2 
	It returns -ve if obj1 comes after obj2
	It returns 0 if both objects are same

Implementation of equals() method is optional because it is present in Object class which is available to the class via inheritance.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(4);
		System.out.println(ts); //[10, 5, 4, 1]
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		
		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else 
			return 0;
	}
}

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(4);
		System.out.println(ts); //[1, 4, 5, 10]
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		
		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else 
			return 0;
	}
}

































































































































































































