Q) Types of data structures in java?

Diagram: class46.1


Multithreading 
===============

Q) What is the difference between Thread and Process?

Thread 
------
	A thread is a leight weight sub-process.
	We can run multiple threads concurently.
	One thread can cammunicate with another thread.

Process
-------
	A process is a collection of threads.
	We can run multiple process concurently.
	One process can't communicate with another process.

Mulitasking 
============
Executing several task simultenously such concept is called multitasking.

We have two types of multitasking.

1) Thread based multitasking 
---------------------------
Executing several task simultenously where each task is a same part of a program such type of tasking 
is called thread based multitasking.

It is best suitable for programmatic level.


2) Process based multitasking 
--------------------------------
Executing several task simultenously where each task is a independent process such type of tasking 
is called process based multitasking.

It is best suitable for OS level.


Multithreading
==============
Executing several threads simultenously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by a 
java API.

The main important application area of multithreading are

1) To implements multimedia graphics 

2) To develop video games 

3) To develop animations


Ways to create a thread in java
==============================
We have two ways to create a thread in java.

1) By extending Thread class

2) By implementing Runnable interface 


1) By extending Thread class
-----------------------------
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//start a thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case1: Thread Schedular 
----------------------
If multiple threads are waiting for execution then which thread execute will decided by thread schedular.

What algorithm , behaviour or mechanism used by thread schedular is depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.


case2: Difference between t.start() and to.run() method 
-------------------------------------------------------
If we invoke t.start() method , a new thread will be created which is responsible to execute run() method
automatically.

ex:
class MyThread extends Thread 
{
	//work of a thread
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//start a thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we invoke t.run() method , no new thread will be created but run() method will execute just like 
a normal method.

ex:
---
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//no new thread
		t.run();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case3: If we won't override run() method 
-------------------------------------------
If we won't override run() method then Thread class run() method will execute automatically. 
Thread class run() method is empty implementation. Hence we won't get any output from child thread.

ex:
--
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//new thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case4: If we overload run() method 
------------------------------------
If we overload run() method then Thread class start() method always execute run() method with no 
parameter only.

ex:
----
class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg method");
	}
	public void run(int i)
	{
		System.out.println("int-arg method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//new thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case5: Life Cycle of a thread 
-------------------------------
Diagram: class46.2

Once if we create a thread then our thread will be in new or born state.

Once t.start() method called our thread goes to running state.

If thread schedular allocates to CPU then out thread enters to running state.

Once the run() method execution is completed then our thread goes to dead state.




2) By implementing Runnable interface 
--------------------------------------
class MyRunnable implements Runnable 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyRunnable r = new MyRunnable();
		
		Thread t=new Thread(r); // r is a targatable interface 
		
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}




Daemon Thread 
==============
Daemon thread is a low priority thread that runs in a background to provide services like garbage 
collection, finalizer and etc.

In short, daemon thread is used to provide the services to user threads.

There are many daemon threads are running as given below.

ex:
	Garbage Collector 
	Attach Listener 
	SignalDispatch 
	and etc

Life of daemon threads depend upon user threads because when user threads died then daemon thread will 
die automatically.

We can change the behaviour of daemon thread before we start a thread. If we change behaviour of 
daemon thread after starting a thread then we will get runtime exception called IllegalThreadStateException.

To start a daemon thread we will use setDaemon(true) method.

To check a thread is a daemon or not we will use isDaemon() method.

ex:
----
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println(Thread.currentThread().isDaemon());
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.setDaemon(true);
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

Setting and getting name of thread 
===================================
In java, every thread has a name automatically given by JVM or explicitly provided by the programmer.

We have following methods to set and get name of a thread.

ex:
	public final void setName(String name);
	public final String getName();

ex:
----
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());//main
		
		MyThread t=new MyThread();
		System.out.println(t.getName()); // Thread-0
		
		Thread.currentThread().setName("Parent-Thread");
		System.out.println(Thread.currentThread().getName());//Parent-Thread
		
		t.setName("Child-Thread");
		System.out.println(t.getName()); // Child-Thread
	}
}

Thread priority 
=================
In java, every thread has a priority automatically given by the JVM or explicitly provided by the 
programmer.

We have valid range for thread priority i.e 1 to 10.Where 1 is a least priority and 10 is a highest 
priority.

A Thread class defines following standard constants as thread priority.
ex:
	Thread.MAX_PRIORITY  - 10
	Thread.NORM_PRIORITY - 5 
	Thread.MIN_PRIORITY  - 1 

We don't have such constants like LOW_PRIORITY and HIGH_PRIORITY.

A thread which is having highest priority will be executed first.

If multiple threads having same priority then we can't expect any execution order.

Thread schedular uses thread priority while allocating to CPU.

If we take more then 10 priority then we will get runtime exception called IllegalArgumentException.

We have following methods to set and get thread priority.

ex:
	public final void setPriority(int priority);
	public final int getPriority();


ex:
----
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());//5
		
		MyThread t=new MyThread();
		System.out.println(t.getPriority()); // 5
		
		Thread.currentThread().setPriority(9);
		System.out.println(Thread.currentThread().getPriority());//9
		
		t.setPriority(4);
		System.out.println(t.getPriority()); // 4
		
		//t.setPriority(11); // R.E IllegalArgumentException
	}
}


Various ways to prevent a thread from execution 
================================================
There are three ways to prevent(stop) a thread from execution.

1) yield() 

2) join()

3) sleep() 

1) yield() 
------------
It pause current execution thread and gives the chance to other threads having same priority.

If there is no waiting threads or low priority threads then same thread will continue it's execution.

If multiple threads having same priority then we can't expect any execution order.

A thread which is yielded when it will get a chance for execution is depends upon mercy of thread schedular.

ex:
	public static native void yield() 

Diagram : class46.3

ex:
----
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			Thread.currentThread().yield();
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}








































